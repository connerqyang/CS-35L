Commands used to generate hw-pubkey.asc and hw-pubkey.sig
1) Logged onto SEASnet GNU/Linux servers using ssh
2) gpg --version to check that I was using GPG version 2
3) gpg --gen-key
   Selected RSA and RSA key (default option)
   Selected keysize of 2048 bits long (default)
   Specified that key does not expire at all (0, default option)
   Created USER-ID of Conner (Conner Yang, ucla gmail) <conneryang@g.ucla.edu>
   Created passphrase
4) gpg --export -a "Conner" > hw-pubkey.asc to export the public key in ASCII format
5) gpg --output hw-pubkey.sig --detach-sig hw-pubkey.asc
   (Encountered no problems related to exhausting the entropy pool)

Brief answers to the 2 questions listed on the class website
1) If the other teams had been observing all the bytes going across the network in the lab exercise,
   the resulting network is still secure, as all information sent between the client and the SEASnet GNU/Linux servers
   is encrypted after authentication by the session key. Therefore, the other teams cannot decrypt the bytes that they are
   observing without the private key generated by the client, which they do not have, so the resulting network is still secure.

   (1) If I assumed the other teams also tapped my keyboards after I completed all client-server setup and thereby had obtained
       my team's keystrokes during later operation, then my answer changes to the resulting network not being secure.
       When I used eval `ssh-agent` and ssh-add, it required my passphrase, so the other teams would know my passphrase
       if they could obtain my keystrokes. Thus, the other teams could have access to the private key and decrypt the session key,
       and the resulting network would not be secure
    
   (2) If I assumed I am booting off USB and the other teams temporarily had physical control of the USB, then my answer reamins that
       the resulting network are still secure. Although they would have access to the private and public key in ~/.ssh,
       the resulting network would still be secure, as the attacker would not know the passphrase on the private key, making it unsable
       to him or her.

2) The gpg2 --verify command in the instructions doesn't really verify that I personally created the file in question.
   All it does is verify the file against the signature to ensure that the file has not been altered since the creation
   of the signature. However, if a third-party intercepted the file, replaced the public key, and generated a new detached
   signature, the gpg2 --verify command would still result in a successful verification.
   
   I could go about fixing this problem by publicly publishing my public key and detached signature on the internet, so that 
   anyone could verify that these are the same as the file, thus verifying that the situation described above did not occur.
