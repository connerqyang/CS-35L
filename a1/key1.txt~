Exercise 1.1
1. "Do not bother to write down the keystrokes needed to start the editor"
2. C-s H T M L Enter
3. C-s s c a v e n g e r Enter
4. C-s s e l f - r e f e r e n t i a l Enter
5. C-s a r r o w Enter
6. C-e
7. C-a
8. Yes, I did not use arrow keys. I used commands available in Emacs.
9. No, I did not move the cursor using the arrow keys
10. C-x C-c

Exercise 1.2
1. "Do not bother to write down the keystrokes needed to start the editor"
2. M-g g 1 9 Enter C-k
3. C-s D E Enter C-a C-k
4. C-s < ! Enter M-x c o m m e n t - k i l l
5. C-s < ! Enter M-x c o m m e n t - k i l l
   C-n M-x c o m m e n t - k i l l
   C-s < ! Enter M-x c o m m e n t - k i l l

Exercise 1.3
1. "Do not bother to write down the keystrokes needed to start the editor"
2. C-s 1 Enter Backspace 4 2
   C-s 1. C-b Enter Backspace 4 2
3. C-r U Enter C-e C-b C-b Backspace A S C I I
4. C-M-s [^[:ascii:]] C-a C-k
5. C-s < / o l > Enter C-o
6. C-x C-c y

Exercise 1.4
1. cat exer2.html exer2.diff >exer4.html
2. "Do not bother to write down the keystrokes needed to start the editor"
3. M-> C-SP C-n M-w C-r e x e r 1 Enter C-p C-e C-y
4. C-r < ! C-r C-r C-r C-r C-r Enter C-SP C-e M-w M-g g 1 9 C-y
   C-r < ! C-r C-r C-r C-r Enter C-SP C-e M-w M-g g 1 3 1 C-y
   C-r < ! C-r C-r C-r Enter C-SP C-n C-n C-e M-w M-g g 3 8 7 C-y
   C-r < ! C-r C-r Enter C-SP C-n C-n C-e M-w M-g g 4 3 3 C-y
   C-r < ! C-r Enter C-SP C-n C-n C-n C-e M-w M-g g 4 3 4 C-y
   M-g g 4 7 5 Enter C-SP C-n C-n C-e M-w M-g g 3 8 7 C-y
5. M-g g 4 5 5 Enter C-SP M-> C-w
6. C-_
7. M-g 4 5 5 Enter < ! - - M-> - - >
8. C-s < o l Enter Backspace L C-s < o l Enter Backspace L C-s < o l Enter Backspace L C-s < o l Enter Backspace L C-s < o l Enter Backspace L C-s < o l Enter Backspace L C-s < o l Enter Backspace L C-s

   I found 7 instances of "<ol>"
9. diff -u exer1.html exer4.html >exer4.diff

Exercise 1.5
1. M-x make-directory j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter (then type in the C code from the assignment)
3. M-x c o m p i l e Enter M-0 C-k g c c SP h e l l o . c SP - o SP h e l l o Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5. C-SP C-e M-w (go to this .txt file) C-y
   The following is the contents of the buffer hello-out:
   EOF on input 

Exercise 1.6
1. C-x b Enter
2. m o s t - n e g a t i v e - f i x n u m C-j m o s t - p o s i t i v e - f i x n u m C-j
   ( f o r m a t SP " % x " m o s t - n e g a t i v e - f i x n u m ) C-j
   ( f o r m a t SP " % x " m o s t - n e g a t i v e - f i x n u m ) C-j 
   For most-negative-fixnum, I got a value of -2305843009213693952, or 2000000000000000 in hexadecimal
   For most-positive-fixnum, I got a value of 2305843009213693951, or 1fffffffffffffff in hexadecimal
   
   The reason that most-negative-fixnum has a value of -2^61 is that it is a 64-bit system, but there are tag bits used to determine what type of object each object is.

   The reason that most-negative-fixnum has a value one higher than most-positive-fixnum is that in twos-complement (signed) bit representation form, the largest negative value that can be represented has a value one higher than the largest positive value that can be represented.
   This is due to twos-complement form weighting the most significant bit negatively and all of the other bits positively. The most significant bit has a weight higher than the weight of all other bits by 1, if all bits have a value of 1.

3. ( r a n d o m SP " 9 0 5 - 4 1 7 - 2 8 7 " ) C-j
   The result I got was -1109926927816629605
4. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j
   I assigned -461213157413615867 to global variable x
   I assigned 1259321236678046748 to global variable y
5. ( s e t q SP p SP ( * SP x SP y ) ) C-j ( s e t q SP r SP ( l o g a n d SP p SP m o s t - n e g a t i v e - f i x n u m ) ) C-j
   I assigned -2296065762718686426 to p
   I assigned -2305843009213693952 to r
6. r is the correct mathematical product of x and y, see #8 for why I cannot keep repeating this until I get an r that is not correct.
7. The two integers x and y are not truly random in the mathematical sense. This is because the computer can only generate "random" numbers through an algorithm. 
   Thus, these "random" numbers obey the rules of the algorithm, which contradicts what true randomness is.
   A computer program is deterministic, and so the best it can do is create an algorithm that has certain properties that mimics randomness to make all possible values occur about equally often in a pseudo-random series.
8. The logior function sets the nth bit if and only if the nth bit is set in either argument ("Set" means the value of the bit is 1, not 0)
   The logand function sets the nth bit if and only if the nth bit is set in all arguments
   
   If we look at the case where p is negative, calling logior on p and most-negative-fixnum (100.....0000) will return the same value for the most significant bit, as the most significant bit of p must be 1 as it is negative. 1 logior with 1 will remain 1.
   For the rest of the bits, there will also be no effect when logior is called between p and the most-negative-fixnum, as most-negative-fixnum is composed of 100....0000, and calling logior with a bit and a 0 will keep the bit at the same value always (1 | 0 is 1, 0 | 0 is 0)
   Thus, when p is negative, r should always be the same value as p, as the bit will remain the same for all bits.

   If we look at the case where p is positive, calling logand on p and most-positive-fixnum (0111.....111) will get the same result as p
   because p is positive, so the most significant bit is 0 and the other bits will be 0's or 1's in p, but will be 1's in most-positive-fixnum by definition. Any bit that is a 0 will remain a 0 after a logand with a 1,
   and any 1 will remain a 1 after a logand with a 1, and all bits in most-positive-fixnum after the most significant bit are 1 (0 & 0 is 0, 0 & 1 is 0, 1 & 1 is 1).
   Thus, r and p will always be the same value when p is positive as well.

   We can conclude that regardless of whether p is positive or negative, if we follow the instructions and call computer (logior p most-negative-fixnum) for negative p or (logand p most-positive-fixnum) for positive p, the result will be an unchanged p.

   Thus, the probability of r not being the correct mathematical product is 0.


   
   
